---
- hosts: webservers
  become: yes
  become_user: root
  become_method: sudo
  vars:
    aws_access_key_id: "XXXXXXXX"
    aws_secret_access_key: "ZZZZZZZ"
    ee_name: "ansible"
    ee_email: "ansible@ansible.com"

  tasks:
  - name: install pip3
    apt:
      name: python3-pip
      update_cache: yes

  - name: install pexpect
    pip:
      name: pexpect

  - name: check that EE file exist, before checking EE status
    stat:
      path: /usr/local/bin/ee
    register: ee_stat

  - name: download ee file
    get_url:
      url: http://rt.cx/ee
      dest: /tmp/ee
    register: ee_download
    when: ee_stat.stat.exists == False

  - name: install ee
    expect:
      command: /bin/bash /tmp/ee
      timeout: 600
      responses:
        'Enter your name:': "{{ ee_name }}"
        'Enter your email:': "{{ ee_email }}"
    register: ee_install
    when: not ee_download is skipped

  #TODO add autocompletion /etc/bash_completion.d/ee_auto.rc to bash profile

  - name: Check easyengine stack status
    command: ee stack status --nginx --mysql --php --postfix
    register: ee_stack_status

  - name: install easyengine stack
    shell: /usr/local/bin/ee stack install --nginx --mysql --php7 --php --postfix --wpcli
    register: ee_stack_install
    when: ee_stack_status.stdout.count('not installed') > 0

  # service section
  - name: Enable and restart nginx
    service:
      name: nginx
      state: restarted
      enabled: yes
    when: not ee_stack_install is skipped

  - name: Enable and restart php5.6-fpm
    service:
      name: php5.6-fpm
      state: restarted
      enabled: yes
    when: not ee_stack_install is skipped

  - name: Enable and restart php7-fpm
    service:
      name: php7.0-fpm
      state: restarted
      enabled: yes
    when: not ee_stack_install is skipped

  - name: Enable and restart mysql
    service:
      name: mysql
      state: restarted
      enabled: yes
    when: not ee_stack_install is skipped

  #additional server setup
  - name: Install awscli, boto3, s3-pit-restore
    pip:
      name: awscli, boto3, s3-pit-restore

  - name: create .aws directory
    file:
      path: /root/.aws
      state: directory

  - name: create aws credential file
    copy: content="[default]\naws_access_key_id = {{aws_access_key_id}}\naws_secret_access_key = {{aws_secret_access_key}}\nregion = us-west-1\n" dest=/root/.aws/credentials

  - name: install monit
    apt:
      name: monit

  - name: put monit config
    copy:
      backup: yes
      src: configs/monitrc
      dest: /etc/monit/monitrc

  - name: put services monit config
    copy:
      backup: yes
      src: "{{ item }}"
      dest: /etc/monit/conf.d/
    with_fileglob:
      - configs/monit_conf/*

  - name: restart monit
    service:
      name: monit
      state: restarted
